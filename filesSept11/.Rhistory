2+2
head(cars93)
head(Cars93)
install.packages("randomForest")
library("MASS")
head(Cars93)
help(Cars93)
ls(Cars93)
Cars93$Type
Cars93$Price
table(Cars93$AirBags) #display distributions, categorical var like Airbags
round(table(Cars93$AirBags) /nrow(Cars93), 3) #round prev to 3 dec
round(table(Cars93$AirBags) /nrow(Cars93), 3) #round prev to 3 dec
barplot(table(Cars93$AirBags) ,ylab="Frequency", cex.lab=1.3, col=c(2, 3, 4))
#display list of first 20 colors
colors()[1:20]
pallete()
palette()
#restore default palette
palette("default")
barplot(sort(table(Reason)/length(Reason),decreasing=T), ylab="Relative Frequency", + xlab="Reason", col="lighblue", cex.names=1.2, cex.axis=1.2, cex.lab=1.2)
#restore default palette
palette("default")
#restore default palette
palette("default")
Cars93$weight
Cars93$weight
library("MASS") #load library
head(Cars93) #display first 6 observations
help(Cars93) #display help panel on side
ls(Cars93) #list variables
Cars93$Type #list values of one variable, e.g., Type
Cars93$Price
table(Cars93$AirBags) #display distributions, categorical var like Airbags
table(Cars93$AirBags) /nrow(Cars93) #calc rel freq using number of rows
round(table(Cars93$AirBags) /nrow(Cars93), 3) #round prev to 3 dec
#disp bar plot in side panel
barplot(table(Cars93$AirBags) ,ylab="Frequency", cex.lab=1.3, col=c(2, 3, 4))
#display list of first 20 colors
colors()[1:20] #colors outputs list.  [] slices list
#set palette
palette(c("red", "orchid1", "yellow4", "tomato2"))
palette()
#restore default palette
palette("default")
barplot(sort(table(Reason)/length(Reason),decreasing=T), ylab="Relative Frequency", xlab="Reason", col="lighblue", cex.names=1.2, cex.axis=1.2, cex.lab=1.2)
stem(Cars93$weight)
stem(Cars93$weight)
library("MASS") #load library
head(Cars93) #display first 6 observations
help(Cars93) #display help panel on side
ls(Cars93) #list variables
Cars93$Type #list values of one variable, e.g., Type
Cars93$Price
table(Cars93$AirBags) #display distributions, categorical var like Airbags
table(Cars93$AirBags) /nrow(Cars93) #calc rel freq using number of rows
round(table(Cars93$AirBags) /nrow(Cars93), 3) #round prev to 3 dec
#disp bar plot in side panel
barplot(table(Cars93$AirBags) ,ylab="Frequency", cex.lab=1.3, col=c(2, 3, 4))
#display list of first 20 colors
colors()[1:20] #colors outputs list.  [] slices list
#set palette
palette(c("red", "orchid1", "yellow4", "tomato2"))
palette()
#restore default palette
palette("default")
#barplot(sort(table(Reason)/length(Reason),decreasing=T), ylab="Relative Frequency", xlab="Reason", col="lighblue", cex.names=1.2, cex.axis=1.2, cex.lab=1.2)
Cars93$weight
stem(Cars93$weight)
library("MASS") #load library
head(Cars93) #display first 6 observations
help(Cars93) #display help panel on side
ls(Cars93) #list variables
Cars93$Type #list values of one variable, e.g., Type
Cars93$Price
table(Cars93$AirBags) #display distributions, categorical var like Airbags
table(Cars93$AirBags) /nrow(Cars93) #calc rel freq using number of rows
round(table(Cars93$AirBags) /nrow(Cars93), 3) #round prev to 3 dec
#disp bar plot in side panel
barplot(table(Cars93$AirBags) ,ylab="Frequency", cex.lab=1.3, col=c(2, 3, 4))
#display list of first 20 colors
colors()[1:20] #colors outputs list.  [] slices list
#set palette
palette(c("red", "orchid1", "yellow4", "tomato2"))
palette()
#restore default palette
palette("default")
#barplot(sort(table(Reason)/length(Reason),decreasing=T), ylab="Relative Frequency", xlab="Reason", col="lighblue", cex.names=1.2, cex.axis=1.2, cex.lab=1.2)
Cars93$Weight
stem(Cars93$Weight)
stripchart(Cars93$MPG.city, method="stack", pch=16, + cex.axis=1.2, cex.lab=1.2, xlab="Miles per Gallon")
stripchart(Cars93$MPG.city, method="stack", pch=16, cex.axis=1.2, cex.lab=1.2, xlab="Miles per Gallon")
stripchart(Cars93$MPG.city, method="jitter", pch=16, cex.axis=1.2, cex.lab=1.2, xlab="Miles per Gallon")
stripchart(Cars93$MPG.city, method="jitter", pch=16, cex.axis=1.2, cex.lab=1.2, xlab="Miles per Gallon")
stripchart(Cars93$MPG.city, method="jitter", pch=16, cex.axis=1.2, cex.lab=1.2, xlab="Miles per Gallon")
barplot(sort(table(Cars93$Manufacturer)/length(Cars93$Manufacturer),decreasing=T), ylab="Relative Frequency", xlab="Reason", col="lighblue", cex.names=1.2, cex.axis=1.2, cex.lab=1.2)
barplot(sort(table(Cars93$Manufacturer)/length(Cars93$Manufacturer),decreasing=T), ylab="Relative Frequency", xlab="Reason",   cex.names=1.2, cex.axis=1.2, cex.lab=1.2)
barplot(sort(table(Cars93$Manufacturer)/length(Cars93$Manufacturer),decreasing=T), ylab="Relative Frequency", xlab="Manufacturer", cex.names=.1, cex.axis=1.2, cex.lab=1.2)
barplot(sort(table(Cars93$Manufacturer)/length(Cars93$Manufacturer),decreasing=T), ylab="Relative Frequency", xlab="Manufacturer", cex.names=.5, cex.axis=1.2, cex.lab=1.2)
hist(Cars93$MPG.city, cex.lab=1.2, cex.axis=1.2, breaks=seq(0, 10, 1), xlab="MPG city")
hist(Cars93$MPG.city, cex.lab=1.2, cex.axis=1.2, xlab="MPG city")
hist(Cars93$MPG.city, cex.lab=1.2, cex.axis=1.2, breaks=seq(15, 50, 5), xlab="MPG city")
hist(Cars93$MPG.city, cex.lab=1.2, cex.axis=1.2, breaks=seq(15, 50, 4), xlab="MPG city")
hist(Cars93$MPG.city, cex.lab=1.2, cex.axis=1.2, breaks=seq(15, 50, 5), xlab="MPG city")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("C:\Users\gehmand\OneDrive - Carlisle Area School District\Desktop\Data 180 dTomGehman\DATA180\filesSept11")
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("C:/Users\gehmand\OneDrive - Carlisle Area School District\Desktop\Data 180 dTomGehman\DATA180\filesSept11")
read_excel("particulate data.xlsx") # Always keep in mind file extensions excel = .xlsx or .xls, Comma separated value = .csv
# Install library
install.packages("readxl")
#Call library
library("readxl")
library("MASS")
# Read in data from
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("C:/Users/gehmand/OneDrive - Carlisle Area School District/Desktop/Data 180 dTomGehman/DATA180/filesSept11")
read_excel("particulate data.xlsx") # Always keep in mind file extensions excel = .xlsx or .xls, Comma separated value = .csv
#2.
# READ DIRECTLY FROM THE FOLDER
p_data<-read_excel("D:/Dickinson College Teaching/DATA 180/particulate data.xlsx")
# Install library
install.packages("readxl")
#Call library
library("readxl")
library("MASS")
# Read in data from
#1.
#SET WORKING DIRECTORY TO THE FOLDER WHERE THE DATASET IS
setwd("C:/Users/gehmand/OneDrive - Carlisle Area School District/Desktop/Data 180 dTomGehman/DATA180/filesSept11")
read_excel("particulate data.xlsx") # Always keep in mind file extensions excel = .xlsx or .xls, Comma separated value = .csv
#2.
# READ DIRECTLY FROM THE FOLDER
p_data<-read_excel("C:/Users/gehmand/OneDrive - Carlisle Area School District/Desktop/Data 180 dTomGehman/DATA180/filesSept11/particulate data.xlsx")
#3. Read CSV
p_data_csv = read.csv("C:/Users/gehmand/OneDrive - Carlisle Area School District/Desktop/Data 180 dTomGehman/DATA180/filesSept11/particulate data.csv")
# Create your own dataset.
my_data<-data.frame(
col_1 = c("A","B","C","D", "E"),
col_2 = c(1,2,3,4,5),
col_3 = c(1,12,3,4,5.4)
)
my_data
nrow(my_data)
# Create a vector of numbers
vec<-1:10
vec
stem(p_data$particulate_rounded_off)
# USING THE STACK METHOD
stripchart(Cars93$MPG.city,method="stack",pch=16,cex.axis=1.2,cex.lab=1.2,xlab = "Miles per Gallon")
stripchart(Cars93$Length,method="stack",pch=16,cex.axis=1.2,cex.lab=1.2,xlab="Length (inches)")
#USING THE JITTER METHOD
stripchart(Cars93$MPG.city,method="jitter",pch=16,cex.axis=1.2,cex.lab=1.2,xlab="Miles Per Gallon (city)")
stripchart(Cars93$Length,method="jitter",pch=16,cex.axis=1.2,cex.lab=1.2,xlab="Length (inches)")
#HISTOGRAM
hist(p_data$particulate,cex.lab=1.2,cex.axis=1.2,col="lightgray",xlab="Particulate (g/gal)")
# Add a bounding box to the histogram.
#Specifying how many classes you want and how wide you want each class to be
hist(p_data$particulate,cex.lab=1.2,cex.axis=1.2,col="lightgray",breaks=seq(0,7,.5),xlab="Particulate (g/gal)")
box()
#Letting the software choose for you the width of the classes
hist(Particulate,breaks=14,col="lightgray",xlab="Particulate (g/gal)",cex.lab=1.2,cex.axis=1.3)
#Letting the software choose for you the width of the classes
hist(p_data$Particulate,breaks=14,col="lightgray",xlab="Particulate (g/gal)",cex.lab=1.2,cex.axis=1.3)
#Letting the software choose for you the width of the classes
hist(p_data$particulate,breaks=14,col="lightgray",xlab="Particulate (g/gal)",cex.lab=1.2,cex.axis=1.3)
#2.
# READ DIRECTLY FROM THE FOLDER
p_data<-read_excel("C:/Users/gehmand/OneDrive - Carlisle Area School District/Desktop/Data 180 dTomGehman/DATA180/filesSept11/particulate data.xlsx")
# Functions in R
#A function in R is an object containing multiple interrelated statements that are
#run together in a predefined order every time the function is called
# Functions are usually useful when you want to do the same thing over and over again
# The syntax for writing functions in R are as follows
function_name <- function(parameters){
#Do something here
}
function_name
# A function that returns the circumference of a circle given its radius
circumference <- function(r){
2*pi*r
}
print(circumference(2))
print(circumference(6))
# A function that always prints your name
my_name <- function(){
'Kennedy Odongo'
}
print(my_name())
# A function that sums two numbers
sum_two_nums <- function(x, y) {x + y}
print(sum_two_nums(3,4))
print(sum_two_nums(1256,879))
# a function that returns the mean and median of a vector of numbers
mean_median <- function(vector){
mean <- mean(vector)
median <- median(vector)
return(c(mean, median))
}
mean_median
circumference(2)
