library(ggplot2)
library(ggdendro)
ggdendrogram(Ver_Eucl_Complete)+labs(title="Clustered vertabrates, Euclidean Distance,\n Complete Linkage")
ggdendrogram(Ver_Manh_Single) + labs(title="Clustered vertabrates, Manhattan Distance,\n Single Linkage", x="Vertebrates")
plot(Ver_Eucl_Complete, lwd=3, main="Clustered vertabrates, Euclidean Distance,\nComplete Linkage", cex.lab=1.25, xlab="Vertebrates", hang=-1, sub="")
plot(Ver_Manh_Single, lwd=3, main="Clustered vertabrates, Manhattan Distance,\nSingle Linkage", cex.lab=1.25, xlab="Vertebrates", hang=-1, sub="")
library(ggplot2)
library(ggdendro)
ggdendrogram(Ver_Eucl_Complete)+labs(title="Clustered vertabrates, Euclidean Distance,\nComplete Linkage")
ggdendrogram(Ver_Manh_Single) + labs(title="Clustered vertabrates, Manhattan Distance,\nSingle Linkage", xlab="Vertebrates")
plot(Ver_Eucl_Complete, lwd=3, main="Clustered vertabrates, Euclidean Distance,\nComplete Linkage", cex.lab=1.25, xlab="Vertebrates", hang=-1, sub="")
plot(Ver_Manh_Single, lwd=3, main="Clustered vertabrates, Manhattan Distance,\nSingle Linkage", cex.lab=1.25, xlab="Vertebrates", hang=-1, sub="")
library(ggplot2)
library(ggdendro)
ggdendrogram(Ver_Eucl_Complete)+labs(title="Clustered vertabrates, Euclidean Distance,\nComplete Linkage")+xlab("Vertebrates")
ggdendrogram(Ver_Manh_Single) + labs(title="Clustered vertabrates, Manhattan Distance,\nSingle Linkage")+xlab("Vertebrates")
plot(Ver_Eucl_Complete, lwd=3, main="Clustered vertabrates, Euclidean Distance,\nComplete Linkage", cex.lab=1.25, xlab="Vertebrates", hang=-1, sub="")
plot(Ver_Manh_Single, lwd=3, main="Clustered vertabrates, Manhattan Distance,\nSingle Linkage", cex.lab=1.25, xlab="Vertebrates", hang=-1, sub="")
library(ggplot2)
library(ggdendro)
ggdendrogram(Ver_Eucl_Complete)+labs(title="Clustered vertabrates, Euclidean Distance,\nComplete Linkage")
ggdendrogram(Ver_Manh_Single) + labs(title="Clustered vertabrates, Manhattan Distance,\nSingle Linkage", x="Vertebrates")
Ver_Euclidean<-as.matrix(dist(vertebrate[,2:7]))
rownames(Ver_Euclidean)=vertebrate[,1]
colnames(Ver_Euclidean)=vertebrate[,1]
#Ver_Euclidean
Ver_Eucl_Complete = hclust(as.dist(Ver_Euclidean), method="complete")
Ver_Eucl_Complete
Ver_Manhattan<-as.matrix(dist(vertebrate[,2:7]))
rownames(Ver_Manhattan)=vertebrate[,1]
colnames(Ver_Manhattan)=vertebrate[,1]
Ver_Manh_Single = hclust(as.dist(Ver_Manhattan), method="single")
Ver_Manh_Single
Ver_Manhattan<-as.matrix(dist(vertebrate[,2:7]))
rownames(Ver_Manhattan)=vertebrate[,1]
colnames(Ver_Manhattan)=vertebrate[,1]
Ver_Manhattan
Ver_Manh_Single = hclust(as.dist(Ver_Manhattan), method="single")
Ver_Manh_Single
Ver_Manhattan<-as.matrix(dist(vertebrate[,2:7]))
rownames(Ver_Manhattan)=vertebrate[,1]
colnames(Ver_Manhattan)=vertebrate[,1]
Ver_Manh_Single = hclust(as.dist(Ver_Manhattan), method="single")
Ver_Manh_Single
plot(Ver_Eucl_Complete, lwd=3, main="Clustered vertabrates, Euclidean Distance,\nComplete Linkage", cex.lab=1.25, xlab="Vertebrates", hang=-1, sub="")
plot(Ver_Manh_Single, lwd=3, main="Clustered vertabrates, Manhattan Distance,\nSingle Linkage", cex.lab=1.25, xlab="Vertebrates", hang=-1, sub="")
#bonus redo with ggdendro
library(ggplot2)
library(ggdendro)
ggdendrogram(Ver_Eucl_Complete)+labs(title="Clustered vertabrates, Euclidean Distance,\nComplete Linkage")
ggdendrogram(Ver_Manh_Single) + labs(title="Clustered vertabrates, Manhattan Distance,\nSingle Linkage")
Ver_Manhattan<-as.matrix(dist(vertebrate[,2:7], method="manhattan"))
rownames(Ver_Manhattan)=vertebrate[,1]
colnames(Ver_Manhattan)=vertebrate[,1]
Ver_Manh_Single = hclust(as.dist(Ver_Manhattan), method="single")
Ver_Manh_Single
plot(Ver_Eucl_Complete, lwd=3, main="Clustered vertabrates, Euclidean Distance,\nComplete Linkage", cex.lab=1.25, xlab="Vertebrates", hang=-1, sub="")
plot(Ver_Manh_Single, lwd=3, main="Clustered vertabrates, Manhattan Distance,\nSingle Linkage", cex.lab=1.25, xlab="Vertebrates", hang=-1, sub="")
#bonus redo with ggdendro
library(ggplot2)
library(ggdendro)
ggdendrogram(Ver_Eucl_Complete)+labs(title="Clustered vertabrates, Euclidean Distance,\nComplete Linkage")
ggdendrogram(Ver_Manh_Single) + labs(title="Clustered vertabrates, Manhattan Distance,\nSingle Linkage")
Ver_Euclidean<-as.matrix(dist(vertebrate[,2:7]), method="euclidean") #omit 1st and 8th columns, contain text
rownames(Ver_Euclidean)=vertebrate[,1]
colnames(Ver_Euclidean)=vertebrate[,1]
Ver_Eucl_Complete = hclust(as.dist(Ver_Euclidean), method="complete")
Ver_Eucl_Complete
Ver_Manhattan<-as.matrix(dist(vertebrate[,2:7], method="manhattan"))
rownames(Ver_Manhattan)=vertebrate[,1]
colnames(Ver_Manhattan)=vertebrate[,1]
Ver_Manhattan
Ver_Manh_Single = hclust(as.dist(Ver_Manhattan), method="single")
Ver_Manh_Single
Ver_Manhattan<-as.matrix(dist(vertebrate[,2:8], method="manhattan"))
rownames(Ver_Manhattan)=vertebrate[,1]
colnames(Ver_Manhattan)=vertebrate[,1]
Ver_Manh_Single = hclust(as.dist(Ver_Manhattan), method="single")
Ver_Manh_Single
Ver_Manhattan<-as.matrix(dist(vertebrate[,2:8], method="manhattan"))
rownames(Ver_Manhattan)=vertebrate[,1]
colnames(Ver_Manhattan)=vertebrate[,1]
Ver_Manhattan
Ver_Manh_Single = hclust(as.dist(Ver_Manhattan), method="single")
Ver_Manh_Single
Ver_Manhattan<-as.matrix(dist(vertebrate[,2:7], method="manhattan"))
rownames(Ver_Manhattan)=vertebrate[,1]
colnames(Ver_Manhattan)=vertebrate[,1]
Ver_Manh_Single = hclust(as.dist(Ver_Manhattan), method="single")
Ver_Manh_Single
Ver_Euclidean<-as.matrix(dist(vertebrate[,2:7]), method="euclidean") #omit 1st and 8th columns, contain text
rownames(Ver_Euclidean)=vertebrate[,1]
colnames(Ver_Euclidean)=vertebrate[,1]
Ver_Eucl_Complete = hclust(as.dist(Ver_Euclidean), method="single")
plot(Ver_Eucl_Complete, lwd=3, main="Clustered vertabrates, Euclidean Distance,\nComplete Linkage", cex.lab=1.25, xlab="Vertebrates", hang=-1, sub="")
Ver_Euclidean<-as.matrix(dist(vertebrate[,2:7]), method="euclidean") #omit 1st and 8th columns, contain text
rownames(Ver_Euclidean)=vertebrate[,1]
colnames(Ver_Euclidean)=vertebrate[,1]
Ver_Eucl_Complete = hclust(as.dist(Ver_Euclidean), method="complete")
plot(Ver_Eucl_Complete, lwd=3, main="Clustered vertabrates, Euclidean Distance,\nComplete Linkage", cex.lab=1.25, xlab="Vertebrates", hang=-1, sub="")
graph1 <- ggplot(MMtable_k3)+geom_boxplot(aes(Water))
library(tidyverse)
graph1 <- ggplot(MMtable_k3)+geom_boxplot(aes(Water))
knitr::opts_chunk$set(warning=FALSE, message=FALSE)
library(tidyverse)
Mammals_Milk<-read.csv("Milk_Composition.csv",header=T,row.names=1)
head(Mammals_Milk)
summary(Mammals_Milk)
Mammals_Milk_Std<-round(scale(Mammals_Milk),2)
head(Mammals_Milk_Std)
dist_animals = dist(Mammals_Milk_Std, method = "euclidean")
h_animals = hclust(dist_animals, method="complete")
plot(h_animals, lwd=3, cex.lab=1.25, main="Mammals Clustered by Std. Milk Composition \n Euclidean Metric, Complete Linkage", hang=-1, xlab="Mammals", sub="", frame.plot=T)
set.seed(125)
MMilk_km_3 = kmeans(Mammals_Milk_Std, centers=3, nstart=100)
MMilk_km_4 = kmeans(Mammals_Milk_Std, centers=4, nstart=100)
Mammals_Milk = mutate(as.data.frame(Mammals_Milk), km_3=MMilk_km_3$cluster)
Mammals_Milk = mutate(as.data.frame(Mammals_Milk), km_4=MMilk_km_4$cluster)
MMtable_k3=arrange(Mammals_Milk, km_3)
MMtable_k4=arrange(Mammals_Milk, km_4)
print(MMtable_k3)
print(MMtable_k4)
MMilk_Agg_K3 = round(summarize(group_by(MMtable_k3, km_3), Count=n(),
Mean_Water=mean(Water),
Mean_Protein=mean(Protein),
Mean_Fat=mean(Fat),
Mean_Lactose=mean(Lactose),
Mean_Ash=mean(Ash)), 2)
MMilk_Agg_K4 = round(summarize(group_by(MMtable_k4, km_4), Count=n(),
Mean_Water=mean(Water),
Mean_Protein=mean(Protein),
Mean_Fat=mean(Fat),
Mean_Lactose=mean(Lactose),
Mean_Ash=mean(Ash)), 2)
MMilk_Agg_K3
MMilk_Agg_K4
graph1 <- ggplot(MMtable_k3)+geom_boxplot(aes(Water))
require(cowplot)
graph1 <- ggplot(MMtable_k3)+geom_boxplot(aes(Water))
graph2 <- ggplot(MMtable_k3)+geom_boxplot(aes(Protein))
graph3 <- ggplot(MMtable_k3)+geom_boxplot(aes(Fat))
graph4 <- ggplot(MMtable_k3)+geom_boxplot(aes(Lactose))
graph5 <- ggplot(MMtable_k3)+geom_boxplot(aes(Ash))
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
require(cowplot)
library(cowplot)
install.packages("cowplot")
require(cowplot)
graph1 <- ggplot(MMtable_k3)+geom_boxplot(aes(Water))
graph2 <- ggplot(MMtable_k3)+geom_boxplot(aes(Protein))
graph3 <- ggplot(MMtable_k3)+geom_boxplot(aes(Fat))
graph4 <- ggplot(MMtable_k3)+geom_boxplot(aes(Lactose))
graph5 <- ggplot(MMtable_k3)+geom_boxplot(aes(Ash))
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
require(cowplot)
graph1 <- ggplot(MMtable_k3)+geom_boxplot(aes(Water))
graph2 <- ggplot(MMtable_k3)+geom_boxplot(aes(Protein))
graph3 <- ggplot(MMtable_k3)+geom_boxplot(aes(Fat))
graph4 <- ggplot(MMtable_k3)+geom_boxplot(aes(Lactose))
graph5 <- ggplot(MMtable_k3)+geom_boxplot(aes(Ash))
plot_grid(graph1, graph2, graph3, graph4, graph5, labels = "AUTO")
WGSSs = list()
for (i in 1:8){
WGSSs.append(kmeans(Mammals_Milk_Std, centers=i, nstart=50)$tot.withinss)
}
WGSSs = list()
for (i in 1:8){
WGSSs.append(WGSSs, kmeans(Mammals_Milk_Std, centers=i, nstart=50)$tot.withinss)
}
WGSSs = list()
for (i in 1:8){
WGSSs=append(WGSSs, kmeans(Mammals_Milk_Std, centers=i, nstart=50)$tot.withinss)
}
WGSSs = list()
for (i in 1:8){
WGSSs=append(WGSSs, kmeans(Mammals_Milk_Std, centers=i, nstart=50)$tot.withinss)
}
plot(c(1:8),wgss,type="b",pch=16,cex=1.3,ylim=c(0,100), xlab="Number of Groups",ylab="WGSS")
WGSSs = list()
for (i in 1:8){
WGSSs=append(WGSSs, kmeans(Mammals_Milk_Std, centers=i, nstart=50)$tot.withinss)
}
plot(c(1:8),WGSSs,type="b",pch=16,cex=1.3,ylim=c(0,100), xlab="Number of Groups",ylab="WGSS")
WGSSs = list()
for (i in 1:8){
WGSSs=append(WGSSs, kmeans(Mammals_Milk_Std, centers=i, nstart=50)$tot.withinss)
}
plot(c(1:8),WGSSs,type="b",pch=16,cex=1.3,ylim=c(0,150), xlab="Number of Groups",ylab="WGSS")
WGSSs = list()
for (i in 1:8){
WGSSs=append(WGSSs, kmeans(Mammals_Milk_Std, centers=i, nstart=50)$tot.withinss)
}
plot(c(1:8),WGSSs,type="b",pch=16,cex=1.3,ylim=c(0,130), xlab="Number of Groups",ylab="WGSS")
WGSSs = list()
for (i in 1:8){
WGSSs=append(WGSSs, kmeans(Mammals_Milk_Std, centers=i, nstart=50)$tot.withinss)
}
plot(c(1:8),WGSSs,type="b",pch=16,cex=1.3,ylim=c(0,120), xlab="Number of Groups",ylab="WGSS")
source("C:/Users/gehmand/OneDrive - Carlisle Area School District/Desktop/Data 180 dTomGehman/DATA180/Final/final.R", echo=TRUE)
loandefaults = read.csv("loan_default_data_set.csv")
head(loandefaults)
#Question 1
#part a
dim(loandefaults)
#part b
colnames(loandefaults)
source("C:/Users/gehmand/OneDrive - Carlisle Area School District/Desktop/Data 180 dTomGehman/DATA180/Final/final.R", echo=TRUE)
typeof(loandefaults)
head(loandefaults)
class(loandefaults[,i])
for (i in colnames(loandefaults)){
class(loandefaults[,i])
}
for (i in colnames(loandefaults)){
class(loandefaults[,i])
}
for (i in colnames(loandefaults)){
class(loandefaults[,i])
}
for (i in colnames(loandefaults)){
class(loandefaults[[i]])
}
source("C:/Users/gehmand/OneDrive - Carlisle Area School District/Desktop/Data 180 dTomGehman/DATA180/Final/final.R", echo=TRUE)
for (i in colnames(loandefaults)){
print(class(loandefaults[[i]]))
}
for (i in colnames(loandefaults)){
print(class(loandefaults[,i]))
}
#part d
library('dplyr')
for (i in colnames(loandefaults)){
count = 0
for (j in loandefaults[,i]){
if (loandefaults[j, i]=="" | loandefaults[j, i]==0){
count++
}
for (i in colnames(loandefaults)){
count = 0
for (j in loandefaults[,i]){
if (loandefaults[j, i]=="" | loandefaults[j, i]==0){
count=count+1
}
print(count)
}
}
for (i in colnames(loandefaults)){
count = 0
for (j in loandefaults[,i]){
if (loandefaults[j, i]="" | loandefaults[j, i]=0){
loandefaults[1, 1]
loandefaults[1, 1]==""
loandefaults[1, 1]==0
for (i in colnames(loandefaults)){
count = 0
for (j in loandefaults[,i]){
if (loandefaults[j, i]=="" | loandefaults[j, i]==0){
count=count+1
}
print(count)
}
}
for (i in colnames(loandefaults)){
count = 0
for (j in loandefaults[,i]){
if (is.na(loandefaults[j, i])){
count=count+1
}
print(count)
}
}
for (i in colnames(loandefaults)){
sum(is.na(loandefaults[,i]))
}
for (i in colnames(loandefaults)){
sum(is.na(loandefaults[[i]]))
}
for (i in colnames(loandefaults)){
print(sum(is.na(loandefaults[[i]])))
}
for (i in colnames(loandefaults)){
cat(i, sum(is.na(loandefaults[[i]])))
}
cat(i, sum(is.na(loandefaults[[i]])), " ")
for (i in colnames(loandefaults)){
cat(i, sum(is.na(loandefaults[[i]])), " ")
}
for (i in colnames(loandefaults)){
cat(i, sum(is.na(loandefaults[[i]])), "\n")
}
print(loandefaults$pct_card_over_50_uti)
print(loandefaults$credit_age)
for (i in colnames(loandefaults)){
cat(i, sum(is.na(loandefaults[[i]]))/nrow(loandefaults)*100, "% \n")
}
#part d
for (i in colnames(loandefaults)){
cat(i, ":: ", sum(is.na(loandefaults[[i]]))/nrow(loandefaults)*100, "% \n")
}
#part g
library('dplyr')
loandefaults = filter(loandefaults, !(is.na(pct_card_over_50_uti)|is.na(rep_income)))
dim(loandefaults)
#part d
for (i in colnames(loandefaults)){
cat(i, ":: ", sum(is.na(loandefaults[[i]]))/nrow(loandefaults)*100, "% \n")
}
source("C:/Users/gehmand/OneDrive - Carlisle Area School District/Desktop/Data 180 dTomGehman/DATA180/Final/final.R", echo=TRUE)
#Question 2
summarise(loandefaults)
#Question 2
head(loandefaults)
#Question 2
summarise(loandefaults)
#Question 2
summary(loandefaults)
#part b
#additionally find modes of each
names(sort(-table(loandefaults$num_card_inq_24_month)))[1]
names(sort(-table(loandefaults$tot_amount_currently_past_due)))[1]
names(sort(-table(loandefaults$credit_age)))[1]
#num_card_inq_24_month is right-skewed.  It has a median of 0 and a mean of 1.044.
#Most of the data are 0s (mode=0) with some higher numbers that contribute to the mean.
#tot_amount_currently_past_due is similar.  The median of 0 is much less than the mean of 354.2.
#It is right-skewed.
#credit age is close to being centered.  The median is 281, and the mean is 280.9.
#It is very slightly left-skewed but almost symmetrical.
head(loandefaults$credit_age)
ggplot(loandefaults, aes(num_card_inq_24_month)) + geom_histogram()
#part c
library('ggplot2')
ggplot(loandefaults, aes(num_card_inq_24_month)) + geom_histogram()
ggplot(loandefaults, aes(num_card_inq_24_month)) + geom_histogram()
ggplot(loandefaults, aes(num_card_inq_24_month)) + geom_histogram()
ggplot(loandefaults, aes(tot_amount_currently_past_due)) + geom_histogram()
ggplot(loandefaults, aes(credit_age)) + geom_histogram()
#part d
head(loandefaults$rep_education)
#part d
loandefaults$rep_education[1:100]
#part d
#one way to
loandefaults$rep_education
#part d
#one way to
levels(factor(loandefaults$rep_education), levels=T)
#part d
#one way to
print(levels(factor(loandefaults$rep_education)))
#Question 3
#part a
ggplot(loandefaults, aes(Def_ind))+geom_bar()
#Question 3
#part a
ggplot(loandefaults, aes(Def_ind))+geom_bar()+labs(title="Accounts Defaulted")
#Question 3
#part a
ggplot(loandefaults, aes(Def_ind))+geom_bar()+labs(title="Accounts Defaulted", y="count")
#Question 3
#part a
ggplot(loandefaults, aes(Def_ind))+geom_bar()+labs(title="Accounts Defaulted", y="Number of Accounts")
ggplot(loandefaults$Def_ind)+geom_bar()+labs(title="Accounts Defaulted", y="Number of Accounts")
ifelse(T, 1, 0)
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted")))+geom_bar()+labs(title="Accounts Defaulted", y="Number of Accounts")
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted")))+geom_bar()+labs(title="Accounts Defaulted", y="Number of Accounts", x="Status", subtitle="accounts defaulted after an account was
approved and opened with bank XYZ in the past 18 months
months")
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted")))+geom_bar()+labs(title="Accounts Defaulted", y="Number of Accounts", x="Status", subtitle="Defaulted after an account was
approved and opened with bank XYZ in the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted")))+geom_bar()+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was
approved and opened with bank XYZ in the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted")))+geom_bar()+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ in the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted")))+geom_bar()+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\n in the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=Def_ind))+geom_bar()+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=ifelse(Def_ind==1, "red", "green")))+geom_bar()+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=ifelse(Def_ind==1)))+geom_bar()+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=ifelse(Def_ind==1, 1, 0)))+geom_bar()+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted")))+geom_bar()+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), colors=c("red", "green")))+geom_bar()+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
palette()
#Question 3
#part a
palette()=c("red", "green")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=Def_ind))+geom_bar()+scale_fill_manual(values=c("red", "green"))+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=as.discrete(Def_ind)))+geom_bar()+scale_fill_manual(values=c("red", "green"))+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=as.factor(Def_ind)))+geom_bar()+scale_fill_manual(values=c("red", "green"))+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=as.factor(Def_ind)))+geom_bar()+scale_fill_manual(values=c("green", "red""))+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=as(Def_ind)))+geom_bar()+scale_fill_manual(values=c("red", "green"))+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=as.factor(Def_ind)))+geom_bar()+scale_fill_manual(values=c("green", "red"))+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=as.factor(Def_ind)))+geom_bar()+scale_fill_manual(values=c("green", "red"))+guide(colors=F)+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=as.factor(Def_ind)))+geom_bar()+scale_fill_manual(values=c("green", "red"))+guides(colors=F)+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=as.factor(Def_ind)))+geom_bar()+scale_fill_manual(values=c("green", "red"))+guides(colors=None)+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=as.factor(Def_ind)))+geom_bar()+scale_fill_manual(values=c("green", "red"))+guides(color=F)+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted")))+geom_bar()+scale_fill_manual(values=c("green", "red"))+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=as.factor(Def_ind)))+geom_bar()+scale_fill_manual(values=c("green", "red"))+labs(title="Loans Defaulted", y="Number of Accounts", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#part b
ggplot(loandefaults, aes(rep_education))+geom_bar()
#part b
ggplot(loandefaults, aes(rep_education, fill=rep_education))+geom_bar()
#part b
ggplot(loandefaults, aes(rep_education, fill=rep_education))+geom_bar()+labs(title="Educations Level of Account Holders", x="Education Level", y="Frequency")
#part c
ggplot(loandefaults, aes(rep_income))+geom_histogram()
#part c
ggplot(loandefaults, aes(rep_income/1000))+geom_histogram()
#part c
ggplot(loandefaults, aes(rep_income/1000))+geom_histogram()+labs(title="Incomes of Account Holders", x="Income (thousands of dollars)", y="Frequency")
#The incomes appear bell-shaped with a mean, median, and mode of about $170,000.
sd(loandefaults$rep_income)
#The incomes appear bell-shaped with a mean, median, and mode of about $170,000.
mean(loandefaults$rep_income)
#The incomes appear bell-shaped with a mean, median, and mode of about $170,000.
median(loandefaults$rep_income)
#part d
ggplot(loandefaults, aes(tot_balance))+geom_boxplot()
#part d
ggplot(loandefaults, aes(tot_balance))+geom_boxplot()+labs(title="Account Balances", x="Balance ($)")
#Based on the boxplot, the five number summary appears to be:  Min=0, Q1~=45,000, Med=110,000, Q3=170,000, max=200,000
#Actual values to confirm:
min(loandefaults$tot_balance)
min(loandefaults$tot_balance)
min(loandefaults$tot_balance)
quantile(loandefaults$tot_balance, .75)
#Based on the boxplot, the five number summary appears to be:  Min=0, Q1~=45,000, Med=110,000, Q3=170,000, max=200,000
#Actual values to confirm:
min(loandefaults$tot_balance)
quantile(loandefaults$tot_balance, .25)
#Based on the boxplot, the five number summary appears to be:  Min=0, Q1=90,000, Med=110,000, Q3=130,000, max=200,000
#Actual values to confirm:
min(loandefaults$tot_balance)
quantile(loandefaults$tot_balance, .25)
median(loandefaults$tot_balance)
quantile(loandefaults$tot_balance, .75)
max(loandefaults$tot_balance)
#the upper and lower fence can be given by
median(loandefaults$tot_balance)+1.5*(quantile(loandefaults$tot_balance, .25)+quantile(loandefaults$tot_balance, .75))
median(loandefaults$tot_balance)-1.5*(quantile(loandefaults$tot_balance, .25)+quantile(loandefaults$tot_balance, .75))
median(loandefaults$tot_balance)-1.5*(quantile(loandefaults$tot_balance, .25)+quantile(loandefaults$tot_balance, .75))
median(loandefaults$tot_balance)
#the upper and lower fence can be given by
median(loandefaults$tot_balance)+1.5*(quantile(loandefaults$tot_balance, .25)+quantile(loandefaults$tot_balance, .75))
#the upper and lower fence can be given by
median(loandefaults$tot_balance)+1.5*(quantile(loandefaults$tot_balance, .25)-quantile(loandefaults$tot_balance, .75))
median(loandefaults$tot_balance)-1.5*(quantile(loandefaults$tot_balance, .25)-quantile(loandefaults$tot_balance, .75))
ggplot(loandefaults, aes(credit_age)) + geom_histogram() #this shows a strong bell shape.
ggplot(loandefaults, aes(credit_age)) + geom_histogram() + labs(title="Credit Ages", x="Age (months) of first credit product obtained by the applicant") #this shows a strong bell shape.
ggplot(loandefaults, aes(credit_age)) + geom_histogram() + labs(title="Credit Ages", y="Frequency", x="Age (months) of first credit product obtained by the applicant") #this shows a strong bell shape.
ggplot(loandefaults, aes(tot_amount_currently_past_due)) + geom_histogram() #this confirms the strong right skew
ggplot(loandefaults, aes(num_card_inq_24_month)) + geom_histogram()
ggplot(loandefaults, aes(num_card_inq_24_month)) + geom_histogram(binwidth=1)
ggplot(loandefaults, aes(num_card_inq_24_month)) + geom_histogram(binwidth=1) + labs(title="Recent Card Inquiries", x="Number of Card Inquiries in Last 24 Months", y="Frequency")
source("C:/Users/gehmand/OneDrive - Carlisle Area School District/Desktop/Data 180 dTomGehman/DATA180/Final/final.R", echo=TRUE)
quantile(loandefaults$tot_balance, .25)
#Actual values to confirm:
min(loandefaults$tot_balance) #minimum 0
median(loandefaults$tot_balance) #med=
quantile(loandefaults$tot_balance, .75) #
max(loandefaults$tot_balance)
median(loandefaults$tot_balance)-1.5*(quantile(loandefaults$tot_balance, .25)-quantile(loandefaults$tot_balance, .75))
#part d
print(levels(factor(loandefaults$rep_education))) #the 4 categories
#Question 3
#part a
ggplot(loandefaults, aes(ifelse(Def_ind==1, "Defaulted", "Not Defaulted"), fill=as.factor(Def_ind)))+geom_bar()+scale_fill_manual(values=c("green", "red"))+labs(title="Loans Defaulted", y="Frequency", x="Account Status", subtitle="Defaulted after an account was approved and opened with bank XYZ\nin the past 18 months.  ")
#part b
ggplot(loandefaults, aes(rep_education, fill=rep_education))+geom_bar()+labs(title="Educations Level of Account Holders", x="Education Level", y="Frequency")
#part c
ggplot(loandefaults, aes(rep_income/1000))+geom_histogram()+labs(title="Incomes of Account Holders", x="Income (thousands of dollars)", y="Frequency")
#part d
ggplot(loandefaults, aes(tot_balance))+geom_boxplot()+labs(title="Account Balances", x="Balance ($)")
