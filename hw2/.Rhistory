library(MASS)
data(Cars93)
round(table(Cars93$type / nrow(Cars93)), 3)
# Your code goes here
library(MASS)
data(Cars93)
head(Cars93)
round(table(Cars93$type / nrow(Cars93)), 3)
table(Cars93$type / nrow(Cars93))
table(Cars93$Type / nrow(Cars93))
table(Cars93$Type) / nrow(Cars93)
round(table(Cars93$Type) / nrow(Cars93), 3)
#frequency table
table(Cars93$Type)
#relative freq
round(table(Cars93$Type) / nrow(Cars93), 3)
#frequency table
typeTable = table(Cars93$Type)
#relative freq
round(typeTable / nrow(Cars93), 3)
palette()
barplot(typeTable, ylab="Frequency", cex.axis = 1.2, col=c(4, 5, 6))
barplot(typeTable, ylab="Frequency", cex.axis = 1.2, col=1:6)
barplot(typeTable, ylab="Frequency", cex.axis = 1.2, cex.names=1.2, col=1:6)
barplot(typeTable, ylab="Frequency", cex.axis=1.2, cex.names=1.2, cex.lab=1.2, col=1:6)
barplot(typeTable, ylab="Frequency", cex.axis=1.2, cex.names=1.2, cex.lab=1.2, col=1:6)
barplot(typeTable, ylab="Frequency")
barplot(typeTable, ylab="Frequency", cex.axis=1.2, cex.names=1.2, cex.lab=1.2, col=1:6)
#barplot(typeTable, ylab="Frequency", cex.axis=1.2, cex.names=1.2, cex.lab=1.2, col=1:6)
barplot(typeTable, ylab="Frequency", col=1:6)
barplot(typeTable, ylab="Frequency", cex=1.2, col=1:6)
barplot(typeTable, ylab="Frequency", cex.axis=1.2, cex.names=1.2, cex.lab=1.2, col=1:6)
pie(typeTable, main="Types of Cars", col=1:6, cex=1.2)
pie(typeTable, main="Types of Cars", col=1:6, cex=.5)
pie(typeTable, main="Types of Cars", col=1:6, cex=1.2)
#frequency table
typeTable = table(Cars93$Type)
#relative freq
round(typeTable / nrow(Cars93), 3)
#frequency table
typeTable = table(Cars93$Type)
typeTable
#relative freq
round(typeTable / nrow(Cars93), 3)
barplot(typeTable, ylab="Frequency", xlab="Type of Car", cex.axis=1.2, cex.names=1.2, cex.lab=1.2, col=1:6)
install.packages('dplyr')
ls(Cars93)
library(MASS)
MASS::select
library(dplyr)
library(MASS)
MASS::select
ls(Cars93)
Cars93_Ex1 = select(Cars93, Type, EngineSize, Drivetrain, MPG.city)
library(MASS)
library(dplyr)
MASS::select
ls(Cars93)
Cars93_Ex1 = select(Cars93, Type, EngineSize, DriveTrain, MPG.city)
library(MASS)
library(dplyr)
ls(Cars93)
Cars93_Ex1 = select(Cars93, Type, EngineSize, DriveTrain, MPG.city)
head(Cars93_Ex1)
Cars93_Ex2 = filter(Cars93, Type=="Small")
head(Cars93_Ex2)
library(MASS) #load mass first
library(dplyr)
ls(Cars93)
Cars93_Ex1 = select(Cars93, Type, EngineSize, DriveTrain, MPG.city)
head(Cars93_Ex1)
Cars93_Ex2 = filter(Cars93, Type=="Small")
head(Cars93_Ex2)
Cars93_Ex3 = select(filter(Cars93, Horsepowr>150), Model, EngineSize, Horsepower, MPG.highway)
library(MASS) #load mass first
library(dplyr)
ls(Cars93)
Cars93_Ex1 = select(Cars93, Type, EngineSize, DriveTrain, MPG.city)
head(Cars93_Ex1)
Cars93_Ex2 = filter(Cars93, Type=="Small")
head(Cars93_Ex2)
Cars93_Ex3 = select(filter(Cars93, Horsepower>150), Model, EngineSize, Horsepower, MPG.highway)
head(Cars93_Ex3)
ggplot(diamonds, aes(depth)) + geom_histogram(binwidth = 0.2) +
facet_wrap(~cut) + xlim(56, 67)
Cars93_Ex5 = select(filter(Cars93, Horsepower>120 & Type=="Small"), Model, EngineSize, Horsepower, MPG.highway)
head(Cars93_Ex5)
Cars93_Ex6 = select(filter(Cars93, Horsepower>120 | Type=="Small"), Model, EngineSize, Horsepower, MPG.highway)
head(Cars93_Ex6)
# Custom options for knitting
knitr::opts_chunk$set(
message = FALSE,
warning = FALSE,
error = FALSE,
collapse = TRUE,
comment = "#",
fig.height = 5,
fig.width = 5,
fig.align = "center",
cache = FALSE
)
#install.packages("ggplot2") # only need to install once
library(ggplot2)
data(diamonds, package="ggplot2")
dim(diamonds)
head(diamonds)
plot(diamonds$carat,diamonds$price) # x-variable first in this notation
# or
plot(price~carat, data=diamonds) # an alternative way: this is y against x
theme_set(theme_bw())
library(ggplot2)
ggplot(diamonds, aes(x=carat,y=price)) +
geom_point() +
labs(y = 'price $', x = 'carat value')
ggplot(data = diamonds)
#ggplot(diamonds, aes(x=cut,y=price)) + geom_boxplot()
ggplot(diamonds, aes(carat, price)) + geom_point(col = "blue")
ggplot(diamonds, aes(x=carat,y=price)) + geom_point(alpha = 0.2)
ggplot(diamonds, aes(x=carat,y=price)) + geom_point(size = 0.2)
ggplot(diamonds, aes(x=carat,y=price)) + geom_point(shape = 2,size=0.4)
ggplot(diamonds, aes(x=carat,y=price)) + geom_point(size = 0.2) +
geom_smooth()
ggplot(diamonds, aes(carat, price)) + geom_point(size = 0.5) +
coord_trans(x = "log10", y = "log10")
ggplot(diamonds, aes(carat, price, colour=color)) + geom_point() +
coord_trans(x = "log10", y = "log10")
ggplot(diamonds, aes(carat, price, colour=depth)) + geom_point() +
coord_trans(x = "log10", y = "log10")
ggplot(diamonds, aes(carat, price)) + geom_point() +
facet_wrap(~color, ncol=4)
ggplot(diamonds, aes(carat, price)) + geom_point() +
facet_grid(~color, labeller=label_both)
ggplot(diamonds) + geom_point(aes(price, carat))
ggplot(diamonds, aes(depth)) + geom_histogram()
ggplot(diamonds, aes(depth)) + geom_histogram(binwidth=0.2) + xlim(56,67)
ggplot(diamonds, aes(cut, depth)) + geom_boxplot()
ggplot(diamonds, aes(depth)) + geom_histogram(binwidth = 0.2) +
facet_wrap(~cut) + xlim(56, 67)
ggplot(diamonds, aes(depth, fill=cut)) +
geom_histogram(binwidth=0.2,colour="grey50",alpha=.4,position="identity") + xlim(56,67)
#install.packages('maps') # you only need to do this once. maps package includes various maps that we can use.
#install.packages('sf') # you only need to do this once
library(maps)     # Provides latitude and longitude data for various maps
library(sf)
# read the state population data
MainStates <- map_data("state")
#plot all states with ggplot2, using black borders and light blue fill
ggplot() +
geom_polygon( data=MainStates, aes(x=long, y=lat, group=group),
color="black", fill="lightblue" ) +
coord_sf(crs = st_crs(4326)) # projection
ggplot(data = diamonds)
#ggplot(diamonds, aes(x=cut,y=price)) + geom_boxplot()
ggplot(data = diamonds)+ geom_boxplot()
ggplot(diamonds)+ geom_point()
ggplot(diamonds, aes(x=cut,y=price)) + geom_boxplot()
theme_set(theme_bw())
library(ggplot2)
ggplot(diamonds) +
geom_point( aes(x=carat,y=price)) +
labs(y = 'price $', x = 'carat value')
theme_set(theme_bw())
library(ggplot2)
ggplot(diamonds, aes(x=carat,y=price)) +
geom_point() +
labs(y = 'price $', x = 'carat value')
theme_set(theme_bw())
library(ggplot2)
ggplot(diamonds) +
geom_point( aes(x=carat,y=price)) +
labs(y = 'price $', x = 'carat value')
ggplot(diamonds) + geom_boxplot(aes(x=cut,y=price))
hist(Cars93$Horsepower, col="blue", xlab="Horsepower", ylab="Frequency", cex.lab=1.2, cex.axis=1.2, cex.names=1.2, main="Horsepower of Cars")
hist(Cars93$Horsepower, col="blue", xlab="Horsepower", ylab="Frequency", cex.lab=1.2, cex.axis=1.2, cex.name=1.2, main="Horsepower of Cars")
hist(Cars93$Horsepower, col="blue", xlab="Horsepower", ylab="Frequency", cex.lab=1.2, cex.axis=1.2, cex.main=1.2, main="Horsepower of Cars")
hist(Cars93$Horsepower, col="blue", xlab="Horsepower", ylab="Frequency", cex.lab=1.2, cex.axis=1.2, cex.main=1.2, main="Horsepower of Cars", breaks=seq(50, 300, 25))
length(Cars93$Horsepower)
print(Cars93$Passengers)
#'Passengers' is numerical and discrete.
hist(Cars93$Passengers)
#'Passengers' is numerical and discrete.
print(Cars93$Passengers)
hist(Cars93$Passengers)
order(Cars93$Passengers)
sort(Cars93$Passengers)
barplot(Cars93$Passengers)
barplot(factor(Cars93$Passengers))
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
summary(seats)
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
print(seats)
barplot(summmary(seats))
barplot(summary(seats))
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats))
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats))
seats=factor(Cars93$Passengers, order=TRUE)
barplot(summary(seats))
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats))
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats), main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats), main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2, cex.labels=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats), main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats), main="Frequencies of Numbers of Passengers in Cars", col="green",
#cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats), main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats), main="Frequencies of Numbers of Passengers in Cars", col="green",
#cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats), main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats), main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=5, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats), main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats), main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=3,
xlab="Number of Seats in a Car", ylab="Frequency")
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats), main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 3, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8)
barplot(summary(seats), main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
#'Passengers' is numerical and discrete.
#'The problem in the histogram is that it's unclear to the reader what is represented by the bars.
#'E.g., does the first bar represent cars w/ 2 seats, 3 seats, or both?  Does the second represent 3s, 4s, or both?
#'In this case, there aren't any 3s in the data set, but it looks like there are some on the histogram since the 2s are in that column.
#'
#'I.e., a histogram is not appropriate if the classes are the sizes of the distances between the data points.
# print(Cars93$Passengers)
# hist(Cars93$Passengers)
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8) #convert seats into an ordered factor, with numbers 2,3,4...8 as levels
barplot(summary(seats), #use summary of the new seats factor as input for barplot
main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
dotplot(Cars93$Passengers)
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8) #convert seats into an ordered factor, with numbers 2,3,4...8 as levels
barplot(summary(seats), #use summary of the new seats factor as input for barplot
main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
stripchart(Cars93$Passengers)
stripchart(summary(seats))
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8) #convert seats into an ordered factor, with numbers 2,3,4...8 as levels
barplot(summary(seats), #use summary of the new seats factor as input for barplot
main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
stripchart(Cars93$Passengers, method="Stack", pch=16)
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8) #convert seats into an ordered factor, with numbers 2,3,4...8 as levels
barplot(summary(seats), #use summary of the new seats factor as input for barplot
main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
stripchart(Cars93$Passengers, method="stack", pch=16)
stripchart(summary(seats))
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8) #convert seats into an ordered factor, with numbers 2,3,4...8 as levels
barplot(summary(seats), #use summary of the new seats factor as input for barplot
main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
hist(Cars93$Length, main="Car Lengths", xlab="Length", ylab="Frequency",
cex.lab=1.2, cex.axes=1.2, cex.main=1.2,
col="red")
hist(Cars93$Length, main="Car Lengths", xlab="Length", ylab="Frequency",
cex.lab=1.2, cex.axis=1.2, cex.main=1.2,
col="red")
Cars93
boxplot(Cars93$Length)
#It is unimodal and roughly symmetrical.
print(mean(Cars93$Length))
print(median(Cars93$Length))
# Your code goes here
library(MASS)
data(Cars93)
head(Cars93)
#frequency table
typeTable = table(Cars93$Type)
typeTable
#relative freq
round(typeTable / nrow(Cars93), 3)
barplot(typeTable, ylab="Frequency", xlab="Type of Car", cex.axis=1.2, cex.names=1.2, cex.lab=1.2, col=1:6)
pie(typeTable, main="Types of Cars", col=1:6, cex=1.2)
#The mode is 22 (of midsize cars)
hist(Cars93$Horsepower, col="blue", xlab="Horsepower", ylab="Frequency", cex.lab=1.2, cex.axis=1.2, cex.main=1.2, main="Horsepower of Cars")
hist(Cars93$Horsepower, col="blue", xlab="Horsepower", ylab="Frequency", cex.lab=1.2, cex.axis=1.2, cex.main=1.2, main="Horsepower of Cars", breaks=seq(50, 300, 25))
#The latter histogram more closely follows the rule of thumb.
#The rule of thumb is that the number of classes should be close to the square root of the number of observations.
#In this case, there are 93 observations; sqrt(93) = 9.64
#The histogram in part b has 10 classes, which is close to 9.64; the part a histogram only has 5.
#'Passengers' is numerical and discrete.
#'The problem in the histogram is that it's unclear to the reader what is represented by the bars.
#'E.g., does the first bar represent cars w/ 2 seats, 3 seats, or both?  Does the second represent 3s, 4s, or both?
#'In this case, there aren't any 3s in the data set, but it looks like there are some on the histogram since the 2s are in that column.
#'
#'I.e., a histogram is not appropriate if the classes are the same size as the distances between the data points.
# print(Cars93$Passengers)
# hist(Cars93$Passengers)
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8) #convert seats into an ordered factor, with numbers 2,3,4...8 as levels
barplot(summary(seats), #use summary of the new seats factor as input for barplot
main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
hist(Cars93$Length, main="Car Lengths", xlab="Length (inches)", ylab="Frequency",
cex.lab=1.2, cex.axis=1.2, cex.main=1.2,
col="red")
#It is unimodal and roughly symmetrical.
print(mean(Cars93$Length))
print(median(Cars93$Length))
#Yes, it does.  The mean and median are very close to each other, so the graph is roughly symmetrical (i.e., little/no skew).
#There is a slight skew to the right, since the mean>median, but it is small and to be expected.
#'Passengers' is numerical and discrete.
print(sort(Cars93$Passengers))
hist(Cars93$Passengers)
#'The problem in the histogram is that it's unclear to the reader what is represented by the bars.
#'E.g., does the first bar represent cars w/ 2 seats, 3 seats, or both?  Does the second represent 3s, 4s, or both?
#'In this case, there aren't any 3s in the data set, but it looks like there are some on the histogram since the 2s are in that column.
#'
#'I.e., a histogram is not appropriate if the classes are the same size as the distances between the data points.
table(Cars93$Passengers)
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8) #convert seats into an ordered factor, with numbers 2,3,4...8 as levels
barplot(summary(seats), #use summary of the new seats factor as input for barplot
main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
table(Cars93$Passengers)
factor(Cars93$Passengers)
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8) #convert seats into an ordered factor, with numbers 2,3,4...8 as levels
barplot(summary(seats), #use summary of the new seats factor as input for barplot
main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
table(Cars93$Passengers)
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8) #convert seats into an ordered factor, with numbers 2,3,4...8 as levels
summary(seats)
barplot(summary(seats), #use summary of the new seats factor as input for barplot
main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
# Your code goes here
library(MASS)
data(Cars93)
head(Cars93)
#frequency table
typeTable = table(Cars93$Type)
typeTable
#relative freq
round(typeTable / nrow(Cars93), 3)
barplot(typeTable, ylab="Frequency", xlab="Type of Car", cex.axis=1.2, cex.names=1.2, cex.lab=1.2, col=1:6)
pie(typeTable, main="Types of Cars", col=1:6, cex=1.2)
#The mode is 22 (of midsize cars)
hist(Cars93$Horsepower, col="blue", xlab="Horsepower", ylab="Frequency", cex.lab=1.2, cex.axis=1.2, cex.main=1.2, main="Horsepower of Cars")
hist(Cars93$Horsepower, col="blue", xlab="Horsepower", ylab="Frequency", cex.lab=1.2, cex.axis=1.2, cex.main=1.2, main="Horsepower of Cars", breaks=seq(50, 300, 25))
#The latter histogram more closely follows the rule of thumb.
#The rule of thumb is that the number of classes should be close to the square root of the number of observations.
#In this case, there are 93 observations; sqrt(93) = 9.64
#The histogram in part b has 10 classes, which is close to 9.64; the part a histogram only has 5.
#'Passengers' is numerical and discrete.
#print(sort(Cars93$Passengers))
hist(Cars93$Passengers)
#'The problem in the histogram is that it's unclear to the reader what is represented by the bars.
#'E.g., does the first bar represent cars w/ 2 seats, 3 seats, or both?  Does the second represent 3s, 4s, or both?
#'In this case, there aren't any 3s in the data set, but it looks like there are some on the histogram since the 2s are in that column.
#'
#'I.e., a histogram is not appropriate if the classes are the same size as the distances between the data points.
seats=factor(Cars93$Passengers, order=TRUE, levels=2:8) #convert seats into an ordered factor, with numbers 2,3,4...8 as levels
barplot(summary(seats), #use summary of the new seats factor as input for barplot
main="Frequencies of Numbers of Passengers in Cars", col="green",
cex.axis = 1.2, cex.names=1.2, cex.main=1.2,
xlab="Number of Seats in a Car", ylab="Frequency")
hist(Cars93$Length, main="Car Lengths", xlab="Length (inches)", ylab="Frequency",
cex.lab=1.2, cex.axis=1.2, cex.main=1.2,
col="red")
#It is unimodal and roughly symmetrical.
print(mean(Cars93$Length)) #mean
print(median(Cars93$Length)) #median
#Yes, it does meet my expectation.  The mean and median are very close to each other, so the graph is roughly symmetrical (i.e., little/no skew).
#There is a slight skew to the right, since the mean>median, but it is small and to be expected with any data set.
barplot(typeTable, main="Frequencies of Car Types in Cars93", ylab="Frequency", xlab="Type of Car", cex.axis=1.2, cex.names=1.2, cex.lab=1.2, col=1:6)
